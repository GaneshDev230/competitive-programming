//https://leetcode.com/problems/find-pivot-index/description/?envType=problem-list-v2&envId=prefix-sum
class Solution {
public:
    int pivotIndex(vector<int>& nums) {
        int n = nums.size();
        if (n == 0) return -1; 

        int pre[n];
        int suf[n];
        pre[0] = nums[0];
        suf[n - 1] = nums[n - 1];

 
        for (int i = 1; i < n; i++) {
            pre[i] = pre[i - 1] + nums[i];
        }


        for (int i = n - 2; i >= 0; i--) {
            suf[i] = suf[i + 1] + nums[i];
        }
        if(n==1)
        {
            return 0;
        }

       
        for (int i = 0; i < n; i++) {
            if (i == 0) {
               
                if (suf[i + 1] == 0) {
                    return i;
                }
            } else if (i == n - 1) {
                
                if (pre[n - 2] == 0) {
                    return i;
                }
            } else {
                
                if (pre[i - 1] == suf[i + 1]) {
                    return i;
                }
            }
        }

        return -1; 
    }
};
