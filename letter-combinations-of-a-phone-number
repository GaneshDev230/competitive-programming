//https://leetcode.com/problems/letter-combinations-of-a-phone-number/
class Solution {
public:
    void backtrack(string& digits, string& current, int index, vector<string>& result, vector<string>& mapping) {
      
        if (index == digits.size()) {
            result.push_back(current);
            return;
        }

        string letters = mapping[digits[index] - '2'];

        for (char letter : letters) {
            current.push_back(letter);  
            backtrack(digits, current, index + 1, result, mapping);
            current.pop_back();         
        }
    }

    vector<string> letterCombinations(string digits) {
        if (digits.empty()) return {}; 

        vector<string> mapping = {"abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};

        vector<string> result; 
        string current;        
        backtrack(digits, current, 0, result, mapping);
        return result;
    }
};
