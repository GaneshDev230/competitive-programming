//https://leetcode.com/problems/unique-length-3-palindromic-subsequences/description/
class Solution {
public:
    int countPalindromicSubsequence(string s) {
        int n=s.size();
        using pii = std::pair<int, int>;
        unordered_map<char,pii>firstlast;
        for(int i=0;i<n;i++)
        {
            if(!firstlast.count(s[i]))
            {
                firstlast[s[i]] = {i, i};
            }
            else
            {
                firstlast[s[i]].second = i;
            }
        }
        int cont=0;
        for(auto[c,se]:firstlast)
        {
            if(se.first==se.second) continue;
            cont+=unordered_set<char>(s.begin()+se.first+1,s.begin()+se.second).size();
        }
        return cont;
        
    }
};
